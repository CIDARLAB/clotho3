/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.clothocad.core.testers.execution;

import com.mongodb.Mongo;
import com.mongodb.MongoClient;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import javax.script.ScriptException;
import org.bson.types.ObjectId;
import org.clothocad.core.persistence.Persistor;
import org.clothocad.core.datums.Function;
import org.clothocad.core.datums.util.Language;
import org.clothocad.core.layers.execution.CompiledEngineScript;
import org.clothocad.core.persistence.mongodb.MongoDBConnection;
import org.clothocad.core.utils.TestUtils;
import org.clothocad.model.Person;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author spaige
 */
public class T4 {
    
    private Persistor persistor;
    public T4() throws UnknownHostException {
    	this.persistor = new TestUtils().getA(Persistor.class);
    }
    
    //For testing: flush API between tests
    
    private static Function makeBuddy;
    private static Function makeNBuddies;
    private static Function make1000Buddies;
    private static Function pyMakeBuddy;
    private static Function pyMakeNBuddies;
    private static Person cindy = new Person();
    
    
    
    @BeforeClass
    public static void setUpClass() {
        cindy.setName("Cindy Su");

        //XXX: how do you even debug these scripts?
        //XXX: non-trivial security concerns w/ executing user-defined scripts
        makeNBuddies = new Function("makeNBuddies", new String[]{"n","person"}, new Class[]{Integer.class, Person.class}, List.class,
                   "clotho.importFunction('makeBuddy')\n" // ideally becomes something like 'import clotho.makeBuddy as makeBuddy' or api returns function object
                 + "def makeNBuddies(n, person):\n"
                 + "    L = []\n"
                 + "    for i in range(n):\n"
                 + "        L.append(makeBuddy(person))\n" 
                //XXX: uuids for function names for disambiguation is no good if you want scripters to call other functions
                //XXX: some kind of namespacing/organization needs to happen to disambiguate name collisions
                //XXX: inter-language compatibility in the scripting engine?(between arrays, maps, etc)
                 + "    return L", Language.PYTHON);
        
        make1000Buddies = new Function("make1000Buddies", new String[]{"input"}, new Class[]{Person.class}, List.class,
                "function make1000Buddies(input){\n" 
                + "L = new Array()\n"
                + "for (var i=0; i<1000; i++){\n"
                + "output = org.clothocad.data.Person()\n" 
                + "output.name = input.name + \"'s Buddy\"\n"
                + "L.push(output)}"
                + "return L}", Language.JAVASCRIPT);
        
        pyMakeBuddy = new Function("pyMakeBuddy", new String[]{"input"}, new Class[]{Person.class}, Person.class,
                "def pyMakeBuddy(input):\n" //this line should be generated by Script
              + "    import org.clothocad.data.Person as Person\n"
              + "    output = Person()\n" 
              + "    output.name = input.name + \"'s Buddy\"\n"
              + "    return output", Language.PYTHON); 

        
        pyMakeNBuddies = new Function("pyMakeNBuddies", new String[]{"n","person"}, new Class[]{Integer.class, Person.class}, List.class,
                   "clotho.importFunction('pyMakeBuddy')\n" // ideally becomes something like 'import clotho.makeBuddy as makeBuddy' or functions declare dependencies
                 + "def pyMakeNBuddies(n, person):\n"
                 + "    L = []\n"
                 + "    for i in range(n):\n"
                 + "        L.append(pyMakeBuddy(person))\n" 
                //XXX: uuids for function names for disambiguation is no good if you want scripters to call other functions
                //XXX: some kind of namespacing/organization needs to happen to disambiguate name collisions
                 + "    return L", Language.PYTHON);
    }
    
    @After
    public void tearDown() throws UnknownHostException {
        Mongo mongo = new MongoClient();
        mongo.dropDatabase("clotho");
    }
    
    @Before
    public void setUp(){
        makeBuddy = new Function("makeBuddy", new String[]{"input"}, new Class[]{Person.class}, Person.class,
                "function makeBuddy(input){\n" //this line should be generated by Script
                + "output = new org.clothocad.data.Person()\n" 
                + "output.name = input.name + \"'s Buddy\"\n" //this finds getters and setters, yay!
                + "return output}", Language.JAVASCRIPT);
        persistor.save(makeBuddy);
        persistor.save(pyMakeBuddy);
    }
    
    @Test
    public void testGettersAndSettersAsProperty() throws ScriptException {
        //XXX: args as ordered String -> Class map
        Function f = new Function("testProperties", new String[]{"input"}, new Class[]{ScriptTestObject.class}, String.class, 
                "function testProperties(input){\n"
                + "return input.value}", Language.JAVASCRIPT);
        assertEquals("hidden", f.execute(new ScriptTestObject()));
        //more tests for other languages?
    }
    
    @Test 
    public void testMakeABuddy() throws ScriptException{          
        
        Person buddy = (Person) makeBuddy.execute(cindy);
        assertEquals("Cindy Su's Buddy", buddy.getName());
        
        buddy = (Person) pyMakeBuddy.execute(cindy);
        assertEquals("Cindy Su's Buddy", buddy.getName());
        
    }
    
    @Test 
    public void testSaveFunction() throws ScriptException{
        persistor.save(makeBuddy);
        makeBuddy = persistor.get(Function.class, makeBuddy.getUUID());
        makeBuddy.execute(cindy);
    }
    
    @Test
    public void testCrossScriptCall() throws ScriptException{
        //XXX: complications in return types - not always standard java types
        List<Person> result = (List<Person>) makeNBuddies.execute(3, cindy);
        
        assertEquals(3, result.size());
        for (Person buddy : result){
            assertEquals("Cindy Su's Buddy", buddy.getName());
        }
    }
    
    @Test
    public void timeInScriptLoop() throws ScriptException{
        List<Person> result = (List<Person>) make1000Buddies.execute(cindy);
        assertEquals(1000, result.size());
    }
    
    @Test
    public void timeOutScriptLoop() throws ScriptException{
        List<Person> L = new ArrayList<Person>();
        for (int i=0; i<1000; i++){
            L.add((Person) makeBuddy.execute(cindy));
        }
        assertEquals(1000, L.size());
    }
    
    
    @Test
    public void timePyOutScriptLoop() throws ScriptException{
        List<Person> L = new ArrayList<Person>();
        for (int i=0; i<1000; i++){
            L.add((Person) pyMakeBuddy.execute(cindy));
        }
        assertEquals(1000, L.size());
    }
    @Test
    public void timeCrossScriptLoop() throws ScriptException {
        List<Person> result = (List<Person>) makeNBuddies.execute(1000, cindy);
        assertEquals(1000, result.size());
    }
    
    @Test
    public void timeCompiledScript() throws ScriptException {
        CompiledEngineScript s = new CompiledEngineScript("makeBuddy", new String[]{"input"}, "function makeBuddy(input){\n" //this line should be generated by Script
                + "output = new org.clothocad.data.Person()\n" 
                + "output.name = input.name + \"'s Buddy\"\n" //this finds getters and setters, yay!
                + "return output}", Language.JAVASCRIPT);
        
        
        List<Person> L = new ArrayList<Person>();
        for (int i=0; i<1000; i++){
            L.add((Person) s.run(cindy));
        }
        assertEquals(1000, L.size());
    }
    
    @Test
    public void timePyInScriptLoop() throws ScriptException {
        
    }
    
    /*@Test
    
    //XXX: if there are errors in a script called from a script do they get thrown?
    public void timePyCrossScriptLoop() throws ScriptException {
        List<Person> result = (List<Person>) pyMakeNBuddies.execute(1000, cindy);
        assertEquals(1000, result.size());
    }
    
    /*
    @Test
    public void testNonExistentFunction(){
        
    }*/
}