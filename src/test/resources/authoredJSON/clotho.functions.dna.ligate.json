{
  "args" : [ {
    "type" : "array",
    "name" : "fragments"
  } ],
  "code" : "function ligate (fragments) {\n var PCR = clotho.load('PCR');\n  var unwrapped = [];\n  _.forEach(fragments, function (frag) {\n    if (_.isArray(frag)) {\n      clotho.say('Unpurified fragment passed to ligate, selecting largest');\n      frag = _.last(_.sortBy(frag, function (nucSeq) {\n        return _.isUndefined(nucSeq.sequence) ? 0 : nucSeq.sequence.length;\n      }))\n    }\n    if (_.isString(frag)) {\n      clotho.say('Passed string to ligate, wrapping as object');\n      frag = {sequence : frag} ;\n    }\n    unwrapped.push(frag.sequence);\n  });\n  clotho.say(unwrapped);\n var product = PCR.ligate(unwrapped);\n  return _.map(product, function (frag) {\n    return {\n      sequence : frag\n    };\n  });\n}",
  "description" : "Ligate a set of sequences with complementary ends, using NEB style cut marks: caret (^), underscore (_), and pipe (|). Accepts an array of NucSeqsLite, and outputs a NucSeqLite. A \"Fragment\" can be an array of NucSeqs, and the largest will be chosen.",
  "language" : "JAVASCRIPT",
  "name" : "ligate",
  "schema" : "org.clothocad.core.datums.Function",
  "tests" : [ {
    "args" : [ [ {
      "sequence" : "aaaaaaaaaaA^CATG_"
    }, {
      "sequence" : "^CATG_Tttggttggttgg"
    } ] ],
    "output" : {
      "value" : [ {
        "sequence" : "aaaaaaaaaaACATGTttggttggttgg"
      } ],
      "type" : ""
    }
  }, {
    "args" : [ [ [ {
      "sequence" : "aaA^CATG_"
    }, {
      "sequence" : "aaaaaaaaaaA^CATG_"
    } ], {
      "sequence" : "^CATG_Tttggttggttgg"
    } ] ],
    "output" : {
      "value" : [ {
        "sequence" : "aaaaaaaaaaACATGTttggttggttgg"
      } ],
      "type" : ""
    }
  } ],
  "id" : "clotho.functions.dna.ligate"
}